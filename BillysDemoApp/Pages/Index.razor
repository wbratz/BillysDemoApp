@using Microsoft.CodeAnalysis.CSharp.Scripting;
@using Microsoft.CodeAnalysis.Scripting;
@using Newtonsoft.Json;
@using System.Text;
@using System.Text.RegularExpressions

@page "/"

<PageTitle>Title</PageTitle>

<MudGrid Style="padding-top: 10px; padding-left: 2px">
    <MudItem xs="12" sm="6">
        <MudTextField T="string" Label="Code" Variant="Variant.Text" @bind-Value="_code" Lines="25" DisableUnderLine/>
        <MudTextField @bind-Value="_methodName" Label="Execution Method Name" Variant="Variant.Text"></MudTextField>
        <MudTextField T="string" Label="Comma Separated Params" Variant="Variant.Text" @bind-Value="_userParams" Lines="2" />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="RunScript">Run</MudButton>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="1" Class="mud-theme-primary" >
            <MudText Typo="Typo.h5" GutterBottom>
                <pre>@output</pre>
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>
    
@code {
    private const string usingStatements = @"using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using System.Text.RegularExpressions;

";

    private string _methodName = string.Empty;
    private string output = string.Empty;
    private string _userParams = string.Empty;
    private string _code = @"//Add using statements above this line

public class MyClass //do not change
{
    //paste code here
}";
    private HttpClient _httpClient = new HttpClient();

    private async Task RunScript()
    {
        var parameters = Regex.Split(_userParams, @"(?<!\\),").Select(p => p.Replace("\\,", ",").Trim()).ToList();
        var request = new Request(usingStatements + _code, _methodName, new List<object>(parameters));

        string json = JsonConvert.SerializeObject(request);
        var stringContent = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await _httpClient.PostAsync("https://localhost:7136/CodeExecution", stringContent);
        var rawJson = await response.Content.ReadAsStringAsync();
        dynamic parsedJson = JsonConvert.DeserializeObject(rawJson);
        output = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
    }
}
